@model Form
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "طراحی فرم: " + Model.Name;
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />

<div class="pagetitle">
    <h1>@ViewData["Title"]</h1>
</div>

<section class="section">
    <div class="row">
        <!-- ستون اول: پالت فیلدها -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">فیلدهای موجود</h5>
                    <p>فیلد مورد نظر را بکشید و در ستون کناری رها کنید.</p>
                    <div id="field-palette" class="list-group">
                        <div class="list-group-item field-palette-item" data-field-type="Text">فیلد متنی</div>
                        <div class="list-group-item field-palette-item" data-field-type="TextArea">متن بلند</div>
                        <div class="list-group-item field-palette-item" data-field-type="Number">عدد</div>
                        <div class="list-group-item field-palette-item" data-field-type="Email">ایمیل</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ستون دوم: بوم طراحی فرم -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">پیش‌نمایش فرم</h5>
                    <div id="form-canvas" class="list-group">
                        @foreach (var field in Model.FormFields.OrderBy(f => f.Order))
                        {
                            <partial name="_FormFieldItem" model="field" />
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Edit Field Modal -->
<div class="modal fade" id="editFieldModal" tabindex="-1" aria-labelledby="editFieldModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editFieldModalLabel">ویرایش فیلد</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editFieldId" />
                <div class="mb-3">
                    <label for="editFieldLabel" class="form-label">عنوان فیلد</label>
                    <input type="text" class="form-control" id="editFieldLabel">
                </div>
                <div class="mb-3 form-check">
                    <input type="checkbox" class="form-check-input" id="editFieldIsRequired">
                    <label class="form-check-label" for="editFieldIsRequired">ضروری است</label>
                </div>
                <!-- Add more settings here in the future -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                <button type="button" class="btn btn-primary" id="saveFieldChanges">ذخیره تغییرات</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const formId = @Model.Id;
            const verificationToken = '@GetAntiXsrfRequestToken()';
            const canvas = document.getElementById('form-canvas');
            const palette = document.getElementById('field-palette');
            const editModal = new bootstrap.Modal(document.getElementById('editFieldModal'));

            // =================================================================
            // DRAG & DROP INITIALIZATION
            // =================================================================
            new Sortable(palette, {
                group: { name: 'shared', pull: 'clone', put: false },
                sort: false,
                animation: 150
            });

            new Sortable(canvas, {
                group: 'shared',
                animation: 150,
                handle: '.handle', // Only the grip icon can be used for dragging
                onAdd: handleAddField,
                onUpdate: handleUpdateOrder
            });

            // =================================================================
            // EVENT LISTENERS (DELEGATION)
            // =================================================================
            canvas.addEventListener('click', function(e) {
                if (e.target.classList.contains('edit-field-btn')) {
                    const fieldId = e.target.getAttribute('data-id');
                    handleEditField(fieldId);
                }
                if (e.target.classList.contains('delete-field-btn')) {
                    const fieldId = e.target.getAttribute('data-id');
                    handleDeleteField(fieldId);
                }
            });

            document.getElementById('saveFieldChanges').addEventListener('click', handleSaveChanges);


            // =================================================================
            // HANDLER FUNCTIONS
            // =================================================================

            async function handleAddField(evt) {
                const itemEl = evt.item;
                const fieldType = itemEl.getAttribute('data-field-type');

                const formData = new URLSearchParams();
                formData.append('formId', formId);
                formData.append('fieldType', fieldType);

                try {
                    const response = await fetch('@Url.Action("AddFieldToForm", "Forms")', {
                        method: 'POST',
                        headers: { 'RequestVerificationToken': verificationToken },
                        body: formData
                    });

                    if (response.ok) {
                        const newFieldHtml = await response.text();
                        itemEl.outerHTML = newFieldHtml;
                        toastr.success('فیلد جدید با موفقیت اضافه شد.');
                        handleUpdateOrder(); // Save the new order
                    } else {
                        itemEl.remove();
                        toastr.error('خطا در افزودن فیلد.');
                    }
                } catch (error) {
                    itemEl.remove();
                    toastr.error('خطای شبکه در افزودن فیلد.');
                }
            }

            async function handleUpdateOrder() {
                const fieldItems = canvas.querySelectorAll('.list-group-item[data-field-id]');
                const fieldIds = Array.from(fieldItems).map(item => parseInt(item.getAttribute('data-field-id')));

                const data = { FormId: formId, FieldIds: fieldIds };

                try {
                    const response = await fetch('@Url.Action("UpdateFieldOrder", "Forms")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': verificationToken
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if(result.success) toastr.success(result.message);
                    } else {
                        toastr.error('خطای سرور در ذخیره ترتیب فیلدها.');
                    }
                } catch (error) {
                    toastr.error('خطای شبکه در ذخیره ترتیب فیلدها.');
                }
            }

            async function handleEditField(fieldId) {
                try {
                    const response = await fetch(`@Url.Action("GetField", "Forms")/${fieldId}`);
                    if (response.ok) {
                        const field = await response.json();
                        document.getElementById('editFieldId').value = field.id;
                        document.getElementById('editFieldLabel').value = field.label;
                        document.getElementById('editFieldIsRequired').checked = field.isRequired;
                        editModal.show();
                    } else {
                        toastr.error('اطلاعات فیلد یافت نشد.');
                    }
                } catch (error) {
                    toastr.error('خطای شبکه در دریافت اطلاعات فیلد.');
                }
            }

            async function handleSaveChanges() {
                const fieldId = document.getElementById('editFieldId').value;
                const updatedData = {
                    Id: parseInt(fieldId),
                    Label: document.getElementById('editFieldLabel').value,
                    IsRequired: document.getElementById('editFieldIsRequired').checked,
                    FormId: formId // Include other required properties, even if not edited
                };

                try {
                    const response = await fetch(`@Url.Action("UpdateField", "Forms")/${fieldId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': verificationToken
                        },
                        body: JSON.stringify(updatedData)
                    });

                    if (response.ok) {
                        const newFieldHtml = await response.text();
                        const oldFieldElement = document.querySelector(`.list-group-item[data-field-id='${fieldId}']`);
                        if(oldFieldElement) oldFieldElement.outerHTML = newFieldHtml;
                        editModal.hide();
                        toastr.success('فیلد با موفقیت ویرایش شد.');
                    } else {
                         toastr.error('خطا در ویرایش فیلد.');
                    }
                } catch (error) {
                    toastr.error('خطای شبکه در ویرایش فیلد.');
                }
            }

            function handleDeleteField(fieldId) {
                Swal.fire({
                    title: 'آیا مطمئن هستید؟',
                    text: "این عملیات قابل بازگشت نیست!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'بله، حذف کن!',
                    cancelButtonText: 'انصراف'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                         try {
                            const response = await fetch(`@Url.Action("DeleteField", "Forms")/${fieldId}`, {
                                method: 'POST',
                                headers: { 'RequestVerificationToken': verificationToken }
                            });
                            if (response.ok) {
                                const fieldElement = document.querySelector(`.list-group-item[data-field-id='${fieldId}']`);
                                if(fieldElement) fieldElement.remove();
                                Swal.fire('حذف شد!', 'فیلد مورد نظر حذف شد.', 'success');
                            } else {
                                Swal.fire('خطا!', 'خطایی در حذف فیلد رخ داد.', 'error');
                            }
                        } catch (error) {
                            Swal.fire('خطا!', 'خطای شبکه در حذف فیلد.', 'error');
                        }
                    }
                })
            }
        });
    </script>
}


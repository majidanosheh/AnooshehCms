@model WebApplication16.Models.Form
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken!;
    }
}

@{
    ViewData["Title"] = "طراحی فرم: " + Model.Name;
}

<!-- کتابخانه های CSS لازم -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">


<!-- استایل های سفارشی -->
<style>
    #field-palette .list-group-item {
        cursor: grab;
    }

    #form-canvas {
        min-height: 400px;
        border: 2px dashed #ced4da;
        padding: 10px;
        border-radius: 5px;
    }

    .list-group-item .handle {
        cursor: move;
    }

    .list-group-item .field-actions {
        opacity: 0;
        transition: opacity 0.2s ease-in-out;
    }

    .list-group-item:hover .field-actions {
        opacity: 1;
    }

    .ghost-class {
        opacity: 0.4;
        background-color: #c8ebfb;
    }
</style>

<div class="pagetitle">
    <h1>@ViewData["Title"]</h1>
</div>

<section class="section">
    <div class="row">
        <!-- ستون پالت فیلدها -->
        <div class="col-lg-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">ابزارها</h5>
                    <p>فیلد مورد نظر را به ستون کناری بکشید.</p>
                    <div id="field-palette" class="list-group">
                        <div class="list-group-item" data-field-type="Text"><i class="bi bi-fonts me-2"></i>فیلد متنی</div>
                        <div class="list-group-item" data-field-type="TextArea"><i class="bi bi-textarea-t me-2"></i>متن بلند</div>
                        <div class="list-group-item" data-field-type="Number"><i class="bi bi-hash me-2"></i>عدد</div>
                        <div class="list-group-item" data-field-type="Email"><i class="bi bi-at me-2"></i>ایمیل</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ستون بوم طراحی -->
        <div class="col-lg-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">پیش‌نمایش فرم</h5>
                    <div id="form-canvas" class="list-group">
                        @foreach (var field in Model.FormFields.OrderBy(f => f.Order))
                        {
                            <partial name="_FormFieldItem" model="field" />
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Modal برای ویرایش فیلد -->
<div class="modal fade" id="editFieldModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">ویرایش فیلد</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editFieldId" />
                <div class="mb-3">
                    <label for="editFieldLabel" class="form-label">عنوان فیلد</label>
                    <input type="text" class="form-control" id="editFieldLabel">
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="editFieldIsRequired">
                    <label class="form-check-label" for="editFieldIsRequired">این فیلد الزامی است</label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                <button type="button" class="btn btn-primary" id="saveFieldChanges">ذخیره</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // --- راه‌اندازی اولیه ---
            const formId = @Model.Id;
            const verificationToken = '@GetAntiXsrfRequestToken()';
            const canvas = document.getElementById('form-canvas');
            const editModal = new bootstrap.Modal(document.getElementById('editFieldModal'));

            // --- فعال‌سازی Drag & Drop ---
            new Sortable(document.getElementById('field-palette'), {
                group: { name: 'shared', pull: 'clone', put: false },
                sort: false,
            });

            new Sortable(canvas, {
                group: 'shared',
                handle: '.handle',
                animation: 150,
                ghostClass: 'ghost-class',
                onAdd: handleAddField,
                onUpdate: handleUpdateOrder
            });

            // --- مدیریت رویدادها ---
            canvas.addEventListener('click', function(e) {
                const editBtn = e.target.closest('.edit-field-btn');
                const deleteBtn = e.target.closest('.delete-field-btn');
                if (editBtn) handleEditField(editBtn.dataset.id);
                if (deleteBtn) handleDeleteField(deleteBtn.dataset.id);
            });
            document.getElementById('saveFieldChanges').addEventListener('click', handleSaveChanges);

            // --- توابع اجرایی ---
            async function sendRequest(url, method, body) {
                const headers = { 'RequestVerificationToken': verificationToken };
                const options = { method, headers };
                if (body) {
                    headers['Content-Type'] = 'application/json';
                    options.body = JSON.stringify(body);
                }
                const response = await fetch(url, options);
                if (!response.ok) {
                    toastr.error(`خطای سرور: ${response.statusText}`);
                    throw new Error(`Server error: ${response.status}`);
                }
                return response;
            }

            async function handleAddField(evt) {
                const fieldType = evt.item.dataset.fieldType;
                const tempElement = evt.item;

                try {
                     const response = await fetch(`@Url.Action("AddFieldToForm", "Forms")?formId=${formId}&fieldType=${fieldType}`, {
                        method: 'POST',
                        headers: { 'RequestVerificationToken': verificationToken }
                    });

                    if (response.ok) {
                        const newFieldHtml = await response.text();
                        const newElement = document.createElement('div');
                        newElement.innerHTML = newFieldHtml;
                        tempElement.replaceWith(newElement.firstElementChild);
                        toastr.success('فیلد اضافه شد.');
                        await handleUpdateOrder();
                    } else {
                        throw new Error("Failed to add field");
                    }
                } catch(error) {
                    tempElement.remove();
                    toastr.error('خطا در افزودن فیلد.');
                }
            }

            async function handleUpdateOrder() {
                const fieldIds = Array.from(canvas.querySelectorAll('[data-field-id]')).map(el => parseInt(el.dataset.fieldId));
                const data = { FormId: formId, FieldIds: fieldIds };
                try {
                    const response = await sendRequest('@Url.Action("UpdateFieldOrder", "Forms")', 'POST', data);
                    if(response.ok) toastr.info('ترتیب فیلدها ذخیره شد.');
                } catch (e) {
                    console.error("Error updating order:", e);
                }
            }

            async function handleEditField(fieldId) {
                try {
                    const response = await fetch(`@Url.Action("GetField", "Forms")/${fieldId}`);
                    if (response.ok) {
                        const field = await response.json();
                        document.getElementById('editFieldId').value = field.id;
                        document.getElementById('editFieldLabel').value = field.label;
                        document.getElementById('editFieldIsRequired').checked = field.isRequired;
                        editModal.show();
                    } else {
                        throw new Error("Field not found");
                    }
                } catch(e) {
                    toastr.error('اطلاعات فیلد یافت نشد.');
                }
            }

            async function handleSaveChanges() {
                const fieldId = document.getElementById('editFieldId').value;
                const data = {
                    Id: parseInt(fieldId),
                    Label: document.getElementById('editFieldLabel').value,
                    IsRequired: document.getElementById('editFieldIsRequired').checked,
                    // ارسال مقادیر دیگر برای جلوگیری از null شدن آن‌ها در کنترلر
                    FormId: formId,
                    FieldType: 0, // مقدار پیش فرض، در سرور نادیده گرفته میشود
                    Order: 0,     // مقدار پیش فرض، در سرور نادیده گرفته میشود
                };

                try {
                    const response = await sendRequest(`@Url.Action("UpdateField", "Forms")`, 'POST', data);
                    if (response.ok) {
                        const newHtml = await response.text();
                        const elementToReplace = document.querySelector(`[data-field-id='${fieldId}']`);
                        if(elementToReplace) {
                           elementToReplace.outerHTML = newHtml;
                        }
                        editModal.hide();
                        toastr.success('فیلد ویرایش شد.');
                    } else {
                         throw new Error("Failed to update field");
                    }
                } catch (e) {
                     toastr.error('خطا در ویرایش فیلد.');
                }
            }

            function handleDeleteField(fieldId) {
                Swal.fire({
                    title: 'آیا مطمئن هستید؟', text: "این عملیات غیرقابل بازگشت است!", icon: 'warning',
                    showCancelButton: true, confirmButtonText: 'بله، حذف کن!', cancelButtonText: 'انصراف'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        try {
                            await sendRequest(`@Url.Action("DeleteField", "Forms")/${fieldId}`, 'POST');
                            document.querySelector(`[data-field-id='${fieldId}']`)?.remove();
                            Swal.fire('حذف شد!', 'فیلد مورد نظر حذف شد.', 'success');
                        } catch (e) {
                             Swal.fire('خطا!', 'خطایی در حذف فیلد رخ داد.', 'error');
                        }
                    }
                });
            }
        });
    </script>
}

